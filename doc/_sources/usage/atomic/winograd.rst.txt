Winograd
================

Winograd算法可以实现对二维卷积计算加速，目前针对卷及提供的加速实现必须满足以下要求：

1. kernel 大小为3×3;

2. 窗口滑动步长 stride_h=1 且 stride_w=1

3. 不支持对kernel dilation操作


定点运算
__________

该操作的输入feature map、kernel以及输出feature map为8bits，bias为16bits。

输入输出的feature map以及kernel均按照4N模式存储，bias按照1N模式存储。

    .. code-block:: c

         typedef struct {
             unsigned int input_addr;
             unsigned int weight_addr;
             unsigned int bias_addr;
             unsigned int output_addr;
             unsigned int input_shape[4];
             unsigned int output_c;
             unsigned int input_stride[4];
             unsigned int ins_h;
             unsigned int ins_w;
             unsigned int pad[4];
             unsigned int rshift_bit;
             bool using_bias;
             bool result_add;
             bool if_relu;
             bool input_sign;
             bool bias_sign;
         } WinoQuantParam;

         void bm_atomic_winograd_quantized(const WinoQuantParam* param);

参数说明：

* input_addr：存放输入feature map的Local Memory偏移地址;
* weight_addr：存放权重系数的Local Memory偏移地址;
* bias_addr： 存放bias系数的Local Memory偏移地址;
* output_addr：存放输出feature map的Local Memory偏移地址;
* input_shape[4]：输入feature map的shape，分别对应NCHW四个维度;
* output_c：输出feature map的 C 维度的大小;
* input_stride[4]：存放输入feature map的stride信息，分表对应NCHW四个维度stride的大小
* ins_h/ins_w： 对输入feature map的行/列之间进行插0的个数;
* pad[4]：对输入feature map进行padding的信息，分别对应上下左右的大小;
* rshift_bit：为了防止溢出，中间的累加结果使用int32表示，该参数表示将int32的中间结果右移rshift_bits位之后得到最后的8bits结果;
* using_bias：是否含有bias运算;
* result_add：是否累加上原来的结果，也就是将本次卷积结果与output_addr本来存放的值进行累加;
* if_relu：是否对卷积的结果再进行relu操作;
* input_sign/bias_sign：分别表示输入feature map以及bias的值是否为有符号数。


